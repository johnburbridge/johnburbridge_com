name: Release

on:
  push:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: johnburbridge/johnburbridge-site

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write # Needed for semantic-release to commit/tag/release
      issues: write # Needed for semantic-release to comment on issues/PRs
      pull-requests: write # Needed for semantic-release to comment on issues/PRs
      packages: write # Needed to push docker image

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          # Fetch all history and tags so semantic-release can analyze commits
          # and we can compare tags accurately.
          fetch-depth: 0
          fetch-tags: true 

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci
        
      - name: Get latest tag before release
        id: pre_tag
        run: |
          # Get the latest tag, suppress errors if no tags exist yet
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          echo "Pre-release tag: ${LATEST_TAG}"
          echo "latest_tag=${LATEST_TAG}" >> $GITHUB_OUTPUT

      - name: Run Semantic Release
        id: semantic
        run: npx semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # Add GHCR login token if needed by any semantic-release plugin for registry interaction
          # GHCR_TOKEN: ${{ secrets.GITHUB_TOKEN }} 
          
      - name: Get latest tag after release
        id: post_tag
        run: |
          # Get the latest tag again
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          echo "Post-release tag: ${LATEST_TAG}"
          echo "latest_tag=${LATEST_TAG}" >> $GITHUB_OUTPUT
          
      - name: Check for new release
        id: check_release
        run: |
          PRE_TAG="${{ steps.pre_tag.outputs.latest_tag }}"
          POST_TAG="${{ steps.post_tag.outputs.latest_tag }}"
          if [[ -n "$POST_TAG" && "$PRE_TAG" != "$POST_TAG" ]]; then
            echo "New release detected: ${POST_TAG}"
            echo "new_release_version=${POST_TAG#v}" >> $GITHUB_OUTPUT
            echo "new_release_tag=${POST_TAG}" >> $GITHUB_OUTPUT
          else
            echo "No new release detected."
            echo "new_release_version=" >> $GITHUB_OUTPUT
            echo "new_release_tag=" >> $GITHUB_OUTPUT
          fi
          
      - name: Get PR number from commit
        # Only run if a new version was released
        if: steps.check_release.outputs.new_release_version != ''
        id: pr
        run: |
          # Extract the PR number from the merge commit message
          PR_NUMBER=$(git log -1 --pretty=%s | grep -o '#[0-9]\+' | tr -d '#')
          if [ -n "$PR_NUMBER" ]; then
            echo "PR_NUMBER=${PR_NUMBER}" >> $GITHUB_ENV
            echo "pr_number=${PR_NUMBER}" >> $GITHUB_OUTPUT
          else
            echo "Warning: Could not extract PR number from merge commit message: $(git log -1 --pretty=%s)"
            # Set to empty to potentially skip image tagging if needed
            echo "PR_NUMBER=" >> $GITHUB_ENV 
            echo "pr_number=" >> $GITHUB_OUTPUT
          fi

      - name: Log in to the Container registry
        # Only run if a new version was released AND we potentially found the PR number
        # Note: Image tagging might fail if PR_NUMBER is empty, but login is cheap
        if: steps.check_release.outputs.new_release_version != ''
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Retag and Push Release Image
        # Only run if a new version was released AND we found the PR number
        if: steps.check_release.outputs.new_release_version != '' && env.PR_NUMBER != ''
        run: |
          # Pull the floating tag for the specific PR
          FLOATING_PR_IMAGE="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:pr-${{ env.PR_NUMBER }}-latest"
          RELEASE_VERSION="${{ steps.check_release.outputs.new_release_version }}"
          RELEASE_IMAGE="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${RELEASE_VERSION}"
          LATEST_IMAGE="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
          
          echo "Pulling floating PR image: ${FLOATING_PR_IMAGE}"
          docker pull ${FLOATING_PR_IMAGE}
          
          echo "Tagging ${FLOATING_PR_IMAGE} as release image: ${RELEASE_IMAGE}"
          docker tag ${FLOATING_PR_IMAGE} ${RELEASE_IMAGE}
          docker push ${RELEASE_IMAGE}
          
          echo "Tagging ${FLOATING_PR_IMAGE} as latest image: ${LATEST_IMAGE}"
          docker tag ${FLOATING_PR_IMAGE} ${LATEST_IMAGE}
          docker push ${LATEST_IMAGE}
          
          echo "Image push completed successfully for version ${RELEASE_VERSION}"